# -*- coding: utf-8 -*-
"""
  aerodynamics.py generated by WhatsOpt. 
"""
from aerodynamics_base import AerodynamicsBase
from ssbj_openmdao.disciplines.aerodynamics import Aerodynamics as AerodynamicsDiscipline

class Aerodynamics(AerodynamicsBase):
    """ An OpenMDAO component to encapsulate Aerodynamics discipline """
    def __init__(self, scalers):
        super(Aerodynamics, self).__init__()
        # scalers values
        self.aero = AerodynamicsDiscipline(scalers)
        
    def compute(self, inputs, outputs):
        """ Aerodynamics computation """
        self.aero.compute(inputs, outputs)

	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(Aerodynamics, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Aerodynamics """
    
   		
#       	partials['dpdx', 'ESF'] = np.zeros((1, 1))
#       	partials['dpdx', 'Theta'] = np.zeros((1, 1))
#       	partials['dpdx', 'WT'] = np.zeros((1, 1))
#       	partials['dpdx', 'x_aer'] = np.zeros((1, 1))
#       	partials['dpdx', 'z'] = np.zeros((1, 6))
   		
#       	partials['D', 'ESF'] = np.zeros((1, 1))
#       	partials['D', 'Theta'] = np.zeros((1, 1))
#       	partials['D', 'WT'] = np.zeros((1, 1))
#       	partials['D', 'x_aer'] = np.zeros((1, 1))
#       	partials['D', 'z'] = np.zeros((1, 6))
   		
#       	partials['L', 'ESF'] = np.zeros((1, 1))
#       	partials['L', 'Theta'] = np.zeros((1, 1))
#       	partials['L', 'WT'] = np.zeros((1, 1))
#       	partials['L', 'x_aer'] = np.zeros((1, 1))
#       	partials['L', 'z'] = np.zeros((1, 6))
   		
#       	partials['fin', 'ESF'] = np.zeros((1, 1))
#       	partials['fin', 'Theta'] = np.zeros((1, 1))
#       	partials['fin', 'WT'] = np.zeros((1, 1))
#       	partials['fin', 'x_aer'] = np.zeros((1, 1))
#       	partials['fin', 'z'] = np.zeros((1, 6))        
