# -*- coding: utf-8 -*-
"""
  perfo.py generated by WhatsOpt. 
"""
from perfo_base import PerfoBase
from ssbj_openmdao.disciplines.performance import Performance

class Perfo(PerfoBase):
    """ An OpenMDAO component to encapsulate Perfo discipline """
    def __init__(self, scalers):
        super(Perfo, self).__init__()
        # scalers values
        self.perfo = Performance(scalers)
		
    def compute(self, inputs, outputs):
        """ Perfo computation """
        self.perfo.compute(inputs, outputs)
	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(Perfo, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Perfo """
    
   		
#       	partials['R', 'SFC'] = np.zeros((1, 1))
#       	partials['R', 'WF'] = np.zeros((1, 1))
#       	partials['R', 'WT'] = np.zeros((1, 1))
#       	partials['R', 'fin'] = np.zeros((1, 1))
#       	partials['R', 'z'] = np.zeros((1, 6))        
