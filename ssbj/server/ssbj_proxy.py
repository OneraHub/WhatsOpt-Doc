# -*- coding: utf-8 -*-
"""
  ssbj_proxy.py generated by WhatsOpt. 
"""
from .ssbj import Ssbj
from .ssbj_conversions import *

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from ssbj_base import SsbjBase
from structure_base import StructureBase
from aerodynamics_base import AerodynamicsBase
from propulsion_base import PropulsionBase
from performance_base import PerformanceBase
from constraints_base import ConstraintsBase


class StructureProxy(StructureBase):
    def __init__(self, proxy):
        super(StructureProxy, self).__init__()
        self._proxy = proxy
        
    def compute(self, inputs, outputs):
        output = self._proxy.compute_structure(to_thrift_structure_input(inputs))
        to_openmdao_structure_outputs(output, outputs)
class AerodynamicsProxy(AerodynamicsBase):
    def __init__(self, proxy):
        super(AerodynamicsProxy, self).__init__()
        self._proxy = proxy
        
    def compute(self, inputs, outputs):
        output = self._proxy.compute_aerodynamics(to_thrift_aerodynamics_input(inputs))
        to_openmdao_aerodynamics_outputs(output, outputs)
class PropulsionProxy(PropulsionBase):
    def __init__(self, proxy):
        super(PropulsionProxy, self).__init__()
        self._proxy = proxy
        
    def compute(self, inputs, outputs):
        output = self._proxy.compute_propulsion(to_thrift_propulsion_input(inputs))
        to_openmdao_propulsion_outputs(output, outputs)
class PerformanceProxy(PerformanceBase):
    def __init__(self, proxy):
        super(PerformanceProxy, self).__init__()
        self._proxy = proxy
        
    def compute(self, inputs, outputs):
        output = self._proxy.compute_performance(to_thrift_performance_input(inputs))
        to_openmdao_performance_outputs(output, outputs)
class ConstraintsProxy(ConstraintsBase):
    def __init__(self, proxy):
        super(ConstraintsProxy, self).__init__()
        self._proxy = proxy
        
    def compute(self, inputs, outputs):
        output = self._proxy.compute_constraints(to_thrift_constraints_input(inputs))
        to_openmdao_constraints_outputs(output, outputs)



class SsbjProxy(SsbjBase):
    
    def __init__(self):
        super(SsbjProxy, self).__init__()
        transport = TSocket.TSocket('localhost', 31400)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self._proxy = Ssbj.Client(protocol)
        transport.open()

    
    def create_structure(self):
        return StructureProxy(self._proxy)
    
    def create_aerodynamics(self):
        return AerodynamicsProxy(self._proxy)
    
    def create_propulsion(self):
        return PropulsionProxy(self._proxy)
    
    def create_performance(self):
        return PerformanceProxy(self._proxy)
    
    def create_constraints(self):
        return ConstraintsProxy(self._proxy)
    

    def ping(self):
        self._proxy.ping()

    def shutdown(self):
        self._proxy.shutdown()
    