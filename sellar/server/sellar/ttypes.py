#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Disc1Input(object):
    """
    Attributes:
     - x
     - y2
     - z
    """


    def __init__(self, x=None, y2=None, z=None,):
        self.x = x
        self.y2 = y2
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.x.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.y2 = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readDouble()
                        self.y2.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.z.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Disc1Input')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.x))
            for iter18 in self.x:
                oprot.writeDouble(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y2 is not None:
            oprot.writeFieldBegin('y2', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.y2))
            for iter19 in self.y2:
                oprot.writeDouble(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter20 in self.z:
                oprot.writeDouble(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Disc1Output(object):
    """
    Attributes:
     - y1
    """


    def __init__(self, y1=None,):
        self.y1 = y1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.y1 = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readDouble()
                        self.y1.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Disc1Output')
        if self.y1 is not None:
            oprot.writeFieldBegin('y1', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.y1))
            for iter27 in self.y1:
                oprot.writeDouble(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Disc2Input(object):
    """
    Attributes:
     - y1
     - z
    """


    def __init__(self, y1=None, z=None,):
        self.y1 = y1
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.y1 = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readDouble()
                        self.y1.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readDouble()
                        self.z.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Disc2Input')
        if self.y1 is not None:
            oprot.writeFieldBegin('y1', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.y1))
            for iter40 in self.y1:
                oprot.writeDouble(iter40)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter41 in self.z:
                oprot.writeDouble(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Disc2Output(object):
    """
    Attributes:
     - y2
    """


    def __init__(self, y2=None,):
        self.y2 = y2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.y2 = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readDouble()
                        self.y2.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Disc2Output')
        if self.y2 is not None:
            oprot.writeFieldBegin('y2', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.y2))
            for iter48 in self.y2:
                oprot.writeDouble(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FunctionsInput(object):
    """
    Attributes:
     - x
     - y1
     - y2
     - z
    """


    def __init__(self, x=None, y1=None, y2=None, z=None,):
        self.x = x
        self.y1 = y1
        self.y2 = y2
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readDouble()
                        self.x.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.y1 = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readDouble()
                        self.y1.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.y2 = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = iprot.readDouble()
                        self.y2.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readDouble()
                        self.z.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FunctionsInput')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.x))
            for iter73 in self.x:
                oprot.writeDouble(iter73)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y1 is not None:
            oprot.writeFieldBegin('y1', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.y1))
            for iter74 in self.y1:
                oprot.writeDouble(iter74)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y2 is not None:
            oprot.writeFieldBegin('y2', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.y2))
            for iter75 in self.y2:
                oprot.writeDouble(iter75)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter76 in self.z:
                oprot.writeDouble(iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FunctionsOutput(object):
    """
    Attributes:
     - f
     - g1
     - g2
    """


    def __init__(self, f=None, g1=None, g2=None,):
        self.f = f
        self.g1 = g1
        self.g2 = g2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.f = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readDouble()
                        self.f.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.g1 = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readDouble()
                        self.g1.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.g2 = []
                    (_etype92, _size89) = iprot.readListBegin()
                    for _i93 in range(_size89):
                        _elem94 = iprot.readDouble()
                        self.g2.append(_elem94)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FunctionsOutput')
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.f))
            for iter95 in self.f:
                oprot.writeDouble(iter95)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.g1 is not None:
            oprot.writeFieldBegin('g1', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.g1))
            for iter96 in self.g1:
                oprot.writeDouble(iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.g2 is not None:
            oprot.writeFieldBegin('g2', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.g2))
            for iter97 in self.g2:
                oprot.writeDouble(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Disc1Input)
Disc1Input.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'x', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'y2', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 3
)
all_structs.append(Disc1Output)
Disc1Output.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'y1', (TType.DOUBLE, None, False), None, ),  # 1
)
all_structs.append(Disc2Input)
Disc2Input.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'y1', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 2
)
all_structs.append(Disc2Output)
Disc2Output.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'y2', (TType.DOUBLE, None, False), None, ),  # 1
)
all_structs.append(FunctionsInput)
FunctionsInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'x', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'y1', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'y2', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(FunctionsOutput)
FunctionsOutput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'f', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'g1', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'g2', (TType.DOUBLE, None, False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
