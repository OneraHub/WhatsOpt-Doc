# -*- coding: utf-8 -*-
"""
  run_screening.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 98

import sys
import numpy as np
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.salib_doe_driver import SalibDoeDriver
from SALib.analyze import morris as ma
from SALib.plotting import morris as mp
from sellar import Sellar 

from optparse import OptionParser
parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
(options, args) = parser.parse_args()

pb = Problem(Sellar())
pb.driver = SalibDoeDriver(n_trajs=10, n_levels=4, grid_step_size=1)
case_recorder_filename = 'sellar_screening.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

pb.model.add_design_var('x', lower=0, upper=10)
pb.model.add_design_var('z', lower=0, upper=10)
pb.setup()  
pb.run_driver()        


if options.batch:
    exit(0)
reader = CaseReader(case_recorder_filename)
cases = reader.list_cases('root')
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
data['inputs']['x'] = np.zeros((n,)+(1,))
data['inputs']['z'] = np.zeros((n,)+(2,))
data['outputs']['f'] = np.zeros((n,)+(1,))
data['outputs']['g1'] = np.zeros((n,)+(1,))
data['outputs']['g2'] = np.zeros((n,)+(1,))

for i in range(len(cases)):
    case = reader.get_case(cases[i])
    data['inputs']['x'][i,:] = case.inputs['x']
    data['inputs']['z'][i,:] = case.inputs['z']
    data['outputs']['f'][i,:] = case.outputs['f']
    data['outputs']['g1'][i,:] = case.outputs['g1']
    data['outputs']['g2'][i,:] = case.outputs['g2']

salib_pb = pb.driver.get_salib_problem()
inputs = pb.driver.get_cases()

print('*** Output: f')
output = data['outputs']['f'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('f '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: g1')
output = data['outputs']['g1'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('g1 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: g2')
output = data['outputs']['g2'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('g2 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})


plt.show()
