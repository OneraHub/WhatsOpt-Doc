# -*- coding: utf-8 -*-
"""
  run_server.py generated by WhatsOpt. 
"""
#!/usr/bin/env python

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from server.sellar_optim import SellarOptim as SellarOptimService
from server.sellar_optim_conversions import *
from sellar_optim import SellarOptimFactory as Factory

class SellarOptimHandler:
    server = None

    def __init__(self):
        factory = Factory()
        
        self.functions = factory.create_functions()
        
        self.sellar_disc1 = factory.create_sellar_disc1()
        
        self.sellar_disc2 = factory.create_sellar_disc2()
        

    # Admin interface
    def ping(self):
        print("Ping!")

    def shutdown(self):
        print("Shutting down SellarOptim server...")
        exit(0)

    # SellarOptim interface
    
    def compute_functions(self, ins):
        outputs = {}
        inputs = to_openmdao_functions_inputs(ins)
        self.functions.compute(inputs, outputs)
        return to_thrift_functions_output(outputs)
    
    def compute_sellar_disc1(self, ins):
        outputs = {}
        inputs = to_openmdao_sellar_disc1_inputs(ins)
        self.sellar_disc1.compute(inputs, outputs)
        return to_thrift_sellar_disc1_output(outputs)
    
    def compute_sellar_disc2(self, ins):
        outputs = {}
        inputs = to_openmdao_sellar_disc2_inputs(ins)
        self.sellar_disc2.compute(inputs, outputs)
        return to_thrift_sellar_disc2_output(outputs)
    


handler = SellarOptimHandler()
processor = SellarOptimService.Processor(handler)
transport = TSocket.TServerSocket('0.0.0.0', port=31400)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = handler.server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

print("Starting SellarOptim analysis server...")
server.serve()
print("done!")
