# -*- coding: utf-8 -*-
"""
  functions.py generated by WhatsOpt. 
"""
import numpy as np
from functions_base import FunctionsBase
from math import exp

class Functions(FunctionsBase):
    """ An OpenMDAO component to encapsulate Functions discipline """
		
    def compute(self, inputs, outputs):
        """ Functions computation """
        z = inputs['z']
        x = inputs['x']
        y1 = inputs['y1']
        y2 = inputs['y2']

        outputs['f'] = x**2 + z[1] + y1 + exp(-y2)
        outputs['g1'] = 3.16 - y1
        outputs['g2'] = y2 - 24.0
        
# Reminder: inputs of compute()
#   
#       inputs['x'] -> shape: 1, type: Float    
#       inputs['z'] -> shape: (2,), type: Float    
#       inputs['y1'] -> shape: 1, type: Float    
#       inputs['y2'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(Functions, self).setup()
#        declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Functions """
#   
#       	partials['f', 'x'] = np.zeros((1, 1))
#       	partials['f', 'z'] = np.zeros((1, 2))
#       	partials['f', 'y1'] = np.zeros((1, 1))
#       	partials['f', 'y2'] = np.zeros((1, 1))
#       	partials['g1', 'x'] = np.zeros((1, 1))
#       	partials['g1', 'z'] = np.zeros((1, 2))
#       	partials['g1', 'y1'] = np.zeros((1, 1))
#       	partials['g1', 'y2'] = np.zeros((1, 1))
#       	partials['g2', 'x'] = np.zeros((1, 1))
#       	partials['g2', 'z'] = np.zeros((1, 2))
#       	partials['g2', 'y1'] = np.zeros((1, 1))
#       	partials['g2', 'y2'] = np.zeros((1, 1))        
