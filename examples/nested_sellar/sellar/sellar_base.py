# -*- coding: utf-8 -*-
"""
  sellar_base.py generated by WhatsOpt 1.10.4
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: 
# analysis_id: 943


import numpy as np
from numpy import nan

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION

from sellar.disc1 import Disc1
from sellar.disc2 import Disc2




class SellarBase(Group):
    """ An OpenMDAO base component to encapsulate Sellar MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(SellarBase, self). __init__(**kwargs)

        self.nonlinear_solver = NonlinearBlockGS() 
        self.nonlinear_solver.options['atol'] = 1.0e-10
        self.nonlinear_solver.options['rtol'] = 1.0e-10
        self.nonlinear_solver.options['err_on_non_converge'] = True
        self.nonlinear_solver.options['reraise_child_analysiserror'] = False

        self.linear_solver = ScipyKrylov()       
        self.linear_solver.options['atol'] = 1.0e-10
        self.linear_solver.options['rtol'] = 1.0e-10
        self.linear_solver.options['err_on_non_converge'] = True
        self.linear_solver.options['iprint'] = 1

    def setup(self): 

        self.add_subsystem('Disc1', self.create_disc1(), promotes=['x', 'y1', 'y2', 'z'])
        self.add_subsystem('Disc2', self.create_disc2(), promotes=['y1', 'y2', 'z'])

    def create_disc1(self):
    	return Disc1()
    def create_disc2(self):
    	return Disc2()


# Used by Thrift server to serve disciplines
class SellarFactoryBase(object):
    @staticmethod
    def create_sellar_disc1():
    	return Disc1()
    @staticmethod
    def create_sellar_disc2():
    	return Disc2()
