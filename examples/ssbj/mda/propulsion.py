# -*- coding: utf-8 -*-
"""
  propulsion.py generated by WhatsOpt. 
"""
import numpy as np
from mda.propulsion_base import PropulsionBase
from ssbj_openmdao.ssbj_disciplines.propulsion import Propulsion as PropulsionDiscipline

class Propulsion(PropulsionBase):
    """ An OpenMDAO component to encapsulate Propulsion discipline """
		
    def __init__(self, scalers):
        super(Propulsion, self).__init__()
        # scalers values
        self.propu = PropulsionDiscipline(scalers)
        
    def compute(self, inputs, outputs):
        """ Propulsion computation """
        self.propu.compute(inputs, outputs) 
        
    def compute_partials(self, inputs, partials):
        """ Propulsion computation """
        self.propu.compute_partials(inputs, partials) 
        
# Reminder: inputs of compute()
#   
#       inputs['D'] -> shape: (1,), type: Float    
#       inputs['x_pro'] -> shape: (1,), type: Float    
#       inputs['z'] -> shape: (6,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Propulsion, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Propulsion """
#   
#       	partials['DT', 'D'] = np.zeros((1, 1))
#       	partials['DT', 'x_pro'] = np.zeros((1, 1))
#       	partials['DT', 'z'] = np.zeros((1, 6))
#       	partials['ESF', 'D'] = np.zeros((1, 1))
#       	partials['ESF', 'x_pro'] = np.zeros((1, 1))
#       	partials['ESF', 'z'] = np.zeros((1, 6))
#       	partials['Temp', 'D'] = np.zeros((1, 1))
#       	partials['Temp', 'x_pro'] = np.zeros((1, 1))
#       	partials['Temp', 'z'] = np.zeros((1, 6))
#       	partials['WE', 'D'] = np.zeros((1, 1))
#       	partials['WE', 'x_pro'] = np.zeros((1, 1))
#       	partials['WE', 'z'] = np.zeros((1, 6))
#       	partials['SFC', 'D'] = np.zeros((1, 1))
#       	partials['SFC', 'x_pro'] = np.zeros((1, 1))
#       	partials['SFC', 'z'] = np.zeros((1, 6))        
