#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class StructureInput(object):
    """
    Attributes:
     - L
     - WE
     - x_str
     - z
    """


    def __init__(self, L=None, WE=None, x_str=None, z=None,):
        self.L = L
        self.WE = WE
        self.x_str = x_str
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.L = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.L.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.WE = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readDouble()
                        self.WE.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.x_str = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.x_str.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readDouble()
                        self.z.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructureInput')
        if self.L is not None:
            oprot.writeFieldBegin('L', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.L))
            for iter24 in self.L:
                oprot.writeDouble(iter24)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WE is not None:
            oprot.writeFieldBegin('WE', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.WE))
            for iter25 in self.WE:
                oprot.writeDouble(iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.x_str is not None:
            oprot.writeFieldBegin('x_str', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.x_str))
            for iter26 in self.x_str:
                oprot.writeDouble(iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter27 in self.z:
                oprot.writeDouble(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StructureOutput(object):
    """
    Attributes:
     - Theta
     - sigma
     - WT
     - WF
    """


    def __init__(self, Theta=None, sigma=None, WT=None, WF=None,):
        self.Theta = Theta
        self.sigma = sigma
        self.WT = WT
        self.WF = WF

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Theta = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readDouble()
                        self.Theta.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.sigma = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readDouble()
                        self.sigma.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.WT = []
                    (_etype43, _size40) = iprot.readListBegin()
                    for _i44 in range(_size40):
                        _elem45 = iprot.readDouble()
                        self.WT.append(_elem45)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.WF = []
                    (_etype49, _size46) = iprot.readListBegin()
                    for _i50 in range(_size46):
                        _elem51 = iprot.readDouble()
                        self.WF.append(_elem51)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructureOutput')
        if self.Theta is not None:
            oprot.writeFieldBegin('Theta', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.Theta))
            for iter52 in self.Theta:
                oprot.writeDouble(iter52)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sigma is not None:
            oprot.writeFieldBegin('sigma', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.sigma))
            for iter53 in self.sigma:
                oprot.writeDouble(iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WT is not None:
            oprot.writeFieldBegin('WT', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.WT))
            for iter54 in self.WT:
                oprot.writeDouble(iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WF is not None:
            oprot.writeFieldBegin('WF', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.WF))
            for iter55 in self.WF:
                oprot.writeDouble(iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AerodynamicsInput(object):
    """
    Attributes:
     - ESF
     - Theta
     - WT
     - x_aer
     - z
    """


    def __init__(self, ESF=None, Theta=None, WT=None, x_aer=None, z=None,):
        self.ESF = ESF
        self.Theta = Theta
        self.WT = WT
        self.x_aer = x_aer
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ESF = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readDouble()
                        self.ESF.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Theta = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readDouble()
                        self.Theta.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.WT = []
                    (_etype71, _size68) = iprot.readListBegin()
                    for _i72 in range(_size68):
                        _elem73 = iprot.readDouble()
                        self.WT.append(_elem73)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.x_aer = []
                    (_etype77, _size74) = iprot.readListBegin()
                    for _i78 in range(_size74):
                        _elem79 = iprot.readDouble()
                        self.x_aer.append(_elem79)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype83, _size80) = iprot.readListBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readDouble()
                        self.z.append(_elem85)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AerodynamicsInput')
        if self.ESF is not None:
            oprot.writeFieldBegin('ESF', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.ESF))
            for iter86 in self.ESF:
                oprot.writeDouble(iter86)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Theta is not None:
            oprot.writeFieldBegin('Theta', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.Theta))
            for iter87 in self.Theta:
                oprot.writeDouble(iter87)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WT is not None:
            oprot.writeFieldBegin('WT', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.WT))
            for iter88 in self.WT:
                oprot.writeDouble(iter88)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.x_aer is not None:
            oprot.writeFieldBegin('x_aer', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.x_aer))
            for iter89 in self.x_aer:
                oprot.writeDouble(iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter90 in self.z:
                oprot.writeDouble(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AerodynamicsOutput(object):
    """
    Attributes:
     - dpdx
     - D
     - L
     - fin
    """


    def __init__(self, dpdx=None, D=None, L=None, fin=None,):
        self.dpdx = dpdx
        self.D = D
        self.L = L
        self.fin = fin

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dpdx = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readDouble()
                        self.dpdx.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.D = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = iprot.readDouble()
                        self.D.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.L = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = iprot.readDouble()
                        self.L.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fin = []
                    (_etype112, _size109) = iprot.readListBegin()
                    for _i113 in range(_size109):
                        _elem114 = iprot.readDouble()
                        self.fin.append(_elem114)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AerodynamicsOutput')
        if self.dpdx is not None:
            oprot.writeFieldBegin('dpdx', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.dpdx))
            for iter115 in self.dpdx:
                oprot.writeDouble(iter115)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.D is not None:
            oprot.writeFieldBegin('D', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.D))
            for iter116 in self.D:
                oprot.writeDouble(iter116)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.L is not None:
            oprot.writeFieldBegin('L', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.L))
            for iter117 in self.L:
                oprot.writeDouble(iter117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fin is not None:
            oprot.writeFieldBegin('fin', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.fin))
            for iter118 in self.fin:
                oprot.writeDouble(iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PropulsionInput(object):
    """
    Attributes:
     - D
     - x_pro
     - z
    """


    def __init__(self, D=None, x_pro=None, z=None,):
        self.D = D
        self.x_pro = x_pro
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.D = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = iprot.readDouble()
                        self.D.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.x_pro = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = iprot.readDouble()
                        self.x_pro.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype134, _size131) = iprot.readListBegin()
                    for _i135 in range(_size131):
                        _elem136 = iprot.readDouble()
                        self.z.append(_elem136)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PropulsionInput')
        if self.D is not None:
            oprot.writeFieldBegin('D', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.D))
            for iter137 in self.D:
                oprot.writeDouble(iter137)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.x_pro is not None:
            oprot.writeFieldBegin('x_pro', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.x_pro))
            for iter138 in self.x_pro:
                oprot.writeDouble(iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter139 in self.z:
                oprot.writeDouble(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PropulsionOutput(object):
    """
    Attributes:
     - DT
     - ESF
     - Temp
     - WE
     - SFC
    """


    def __init__(self, DT=None, ESF=None, Temp=None, WE=None, SFC=None,):
        self.DT = DT
        self.ESF = ESF
        self.Temp = Temp
        self.WE = WE
        self.SFC = SFC

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.DT = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readDouble()
                        self.DT.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ESF = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readDouble()
                        self.ESF.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Temp = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = iprot.readDouble()
                        self.Temp.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.WE = []
                    (_etype161, _size158) = iprot.readListBegin()
                    for _i162 in range(_size158):
                        _elem163 = iprot.readDouble()
                        self.WE.append(_elem163)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.SFC = []
                    (_etype167, _size164) = iprot.readListBegin()
                    for _i168 in range(_size164):
                        _elem169 = iprot.readDouble()
                        self.SFC.append(_elem169)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PropulsionOutput')
        if self.DT is not None:
            oprot.writeFieldBegin('DT', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.DT))
            for iter170 in self.DT:
                oprot.writeDouble(iter170)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ESF is not None:
            oprot.writeFieldBegin('ESF', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.ESF))
            for iter171 in self.ESF:
                oprot.writeDouble(iter171)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Temp is not None:
            oprot.writeFieldBegin('Temp', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.Temp))
            for iter172 in self.Temp:
                oprot.writeDouble(iter172)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WE is not None:
            oprot.writeFieldBegin('WE', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.WE))
            for iter173 in self.WE:
                oprot.writeDouble(iter173)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SFC is not None:
            oprot.writeFieldBegin('SFC', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.SFC))
            for iter174 in self.SFC:
                oprot.writeDouble(iter174)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PerformanceInput(object):
    """
    Attributes:
     - SFC
     - WF
     - WT
     - fin
     - z
    """


    def __init__(self, SFC=None, WF=None, WT=None, fin=None, z=None,):
        self.SFC = SFC
        self.WF = WF
        self.WT = WT
        self.fin = fin
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.SFC = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = iprot.readDouble()
                        self.SFC.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.WF = []
                    (_etype184, _size181) = iprot.readListBegin()
                    for _i185 in range(_size181):
                        _elem186 = iprot.readDouble()
                        self.WF.append(_elem186)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.WT = []
                    (_etype190, _size187) = iprot.readListBegin()
                    for _i191 in range(_size187):
                        _elem192 = iprot.readDouble()
                        self.WT.append(_elem192)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fin = []
                    (_etype196, _size193) = iprot.readListBegin()
                    for _i197 in range(_size193):
                        _elem198 = iprot.readDouble()
                        self.fin.append(_elem198)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype202, _size199) = iprot.readListBegin()
                    for _i203 in range(_size199):
                        _elem204 = iprot.readDouble()
                        self.z.append(_elem204)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PerformanceInput')
        if self.SFC is not None:
            oprot.writeFieldBegin('SFC', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.SFC))
            for iter205 in self.SFC:
                oprot.writeDouble(iter205)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WF is not None:
            oprot.writeFieldBegin('WF', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.WF))
            for iter206 in self.WF:
                oprot.writeDouble(iter206)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.WT is not None:
            oprot.writeFieldBegin('WT', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.WT))
            for iter207 in self.WT:
                oprot.writeDouble(iter207)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fin is not None:
            oprot.writeFieldBegin('fin', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.fin))
            for iter208 in self.fin:
                oprot.writeDouble(iter208)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.z))
            for iter209 in self.z:
                oprot.writeDouble(iter209)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PerformanceOutput(object):
    """
    Attributes:
     - R
    """


    def __init__(self, R=None,):
        self.R = R

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.R = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PerformanceOutput')
        if self.R is not None:
            oprot.writeFieldBegin('R', TType.DOUBLE, 1)
            oprot.writeDouble(self.R)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConstraintsInput(object):
    """
    Attributes:
     - DT
     - ESF
     - Temp
     - Theta
     - dpdx
     - sigma
    """


    def __init__(self, DT=None, ESF=None, Temp=None, Theta=None, dpdx=None, sigma=None,):
        self.DT = DT
        self.ESF = ESF
        self.Temp = Temp
        self.Theta = Theta
        self.dpdx = dpdx
        self.sigma = sigma

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.DT = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = iprot.readDouble()
                        self.DT.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ESF = []
                    (_etype219, _size216) = iprot.readListBegin()
                    for _i220 in range(_size216):
                        _elem221 = iprot.readDouble()
                        self.ESF.append(_elem221)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Temp = []
                    (_etype225, _size222) = iprot.readListBegin()
                    for _i226 in range(_size222):
                        _elem227 = iprot.readDouble()
                        self.Temp.append(_elem227)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Theta = []
                    (_etype231, _size228) = iprot.readListBegin()
                    for _i232 in range(_size228):
                        _elem233 = iprot.readDouble()
                        self.Theta.append(_elem233)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.dpdx = []
                    (_etype237, _size234) = iprot.readListBegin()
                    for _i238 in range(_size234):
                        _elem239 = iprot.readDouble()
                        self.dpdx.append(_elem239)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.sigma = []
                    (_etype243, _size240) = iprot.readListBegin()
                    for _i244 in range(_size240):
                        _elem245 = iprot.readDouble()
                        self.sigma.append(_elem245)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConstraintsInput')
        if self.DT is not None:
            oprot.writeFieldBegin('DT', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.DT))
            for iter246 in self.DT:
                oprot.writeDouble(iter246)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ESF is not None:
            oprot.writeFieldBegin('ESF', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.ESF))
            for iter247 in self.ESF:
                oprot.writeDouble(iter247)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Temp is not None:
            oprot.writeFieldBegin('Temp', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.Temp))
            for iter248 in self.Temp:
                oprot.writeDouble(iter248)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Theta is not None:
            oprot.writeFieldBegin('Theta', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.Theta))
            for iter249 in self.Theta:
                oprot.writeDouble(iter249)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dpdx is not None:
            oprot.writeFieldBegin('dpdx', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.dpdx))
            for iter250 in self.dpdx:
                oprot.writeDouble(iter250)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sigma is not None:
            oprot.writeFieldBegin('sigma', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.sigma))
            for iter251 in self.sigma:
                oprot.writeDouble(iter251)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConstraintsOutput(object):
    """
    Attributes:
     - con1_esf
     - con2_esf
     - con_dpdx
     - con_dt
     - con_sigma1
     - con_sigma2
     - con_sigma3
     - con_sigma4
     - con_sigma5
     - con_temp
     - con_theta_low
     - con_theta_up
    """


    def __init__(self, con1_esf=None, con2_esf=None, con_dpdx=None, con_dt=None, con_sigma1=None, con_sigma2=None, con_sigma3=None, con_sigma4=None, con_sigma5=None, con_temp=None, con_theta_low=None, con_theta_up=None,):
        self.con1_esf = con1_esf
        self.con2_esf = con2_esf
        self.con_dpdx = con_dpdx
        self.con_dt = con_dt
        self.con_sigma1 = con_sigma1
        self.con_sigma2 = con_sigma2
        self.con_sigma3 = con_sigma3
        self.con_sigma4 = con_sigma4
        self.con_sigma5 = con_sigma5
        self.con_temp = con_temp
        self.con_theta_low = con_theta_low
        self.con_theta_up = con_theta_up

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.con1_esf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.con2_esf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.con_dpdx = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.con_dt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.con_sigma1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.con_sigma2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.con_sigma3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.con_sigma4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.con_sigma5 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.con_temp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.con_theta_low = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.con_theta_up = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConstraintsOutput')
        if self.con1_esf is not None:
            oprot.writeFieldBegin('con1_esf', TType.DOUBLE, 1)
            oprot.writeDouble(self.con1_esf)
            oprot.writeFieldEnd()
        if self.con2_esf is not None:
            oprot.writeFieldBegin('con2_esf', TType.DOUBLE, 2)
            oprot.writeDouble(self.con2_esf)
            oprot.writeFieldEnd()
        if self.con_dpdx is not None:
            oprot.writeFieldBegin('con_dpdx', TType.DOUBLE, 3)
            oprot.writeDouble(self.con_dpdx)
            oprot.writeFieldEnd()
        if self.con_dt is not None:
            oprot.writeFieldBegin('con_dt', TType.DOUBLE, 4)
            oprot.writeDouble(self.con_dt)
            oprot.writeFieldEnd()
        if self.con_sigma1 is not None:
            oprot.writeFieldBegin('con_sigma1', TType.DOUBLE, 5)
            oprot.writeDouble(self.con_sigma1)
            oprot.writeFieldEnd()
        if self.con_sigma2 is not None:
            oprot.writeFieldBegin('con_sigma2', TType.DOUBLE, 6)
            oprot.writeDouble(self.con_sigma2)
            oprot.writeFieldEnd()
        if self.con_sigma3 is not None:
            oprot.writeFieldBegin('con_sigma3', TType.DOUBLE, 7)
            oprot.writeDouble(self.con_sigma3)
            oprot.writeFieldEnd()
        if self.con_sigma4 is not None:
            oprot.writeFieldBegin('con_sigma4', TType.DOUBLE, 8)
            oprot.writeDouble(self.con_sigma4)
            oprot.writeFieldEnd()
        if self.con_sigma5 is not None:
            oprot.writeFieldBegin('con_sigma5', TType.DOUBLE, 9)
            oprot.writeDouble(self.con_sigma5)
            oprot.writeFieldEnd()
        if self.con_temp is not None:
            oprot.writeFieldBegin('con_temp', TType.DOUBLE, 10)
            oprot.writeDouble(self.con_temp)
            oprot.writeFieldEnd()
        if self.con_theta_low is not None:
            oprot.writeFieldBegin('con_theta_low', TType.DOUBLE, 11)
            oprot.writeDouble(self.con_theta_low)
            oprot.writeFieldEnd()
        if self.con_theta_up is not None:
            oprot.writeFieldBegin('con_theta_up', TType.DOUBLE, 12)
            oprot.writeDouble(self.con_theta_up)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(StructureInput)
StructureInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'L', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'WE', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'x_str', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(StructureOutput)
StructureOutput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Theta', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'sigma', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'WT', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'WF', (TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(AerodynamicsInput)
AerodynamicsInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ESF', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'Theta', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'WT', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'x_aer', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 5
)
all_structs.append(AerodynamicsOutput)
AerodynamicsOutput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dpdx', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'D', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'L', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'fin', (TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(PropulsionInput)
PropulsionInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'D', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'x_pro', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 3
)
all_structs.append(PropulsionOutput)
PropulsionOutput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'DT', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'ESF', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'Temp', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'WE', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'SFC', (TType.DOUBLE, None, False), None, ),  # 5
)
all_structs.append(PerformanceInput)
PerformanceInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'SFC', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'WF', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'WT', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'fin', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'z', (TType.DOUBLE, None, False), None, ),  # 5
)
all_structs.append(PerformanceOutput)
PerformanceOutput.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'R', None, None, ),  # 1
)
all_structs.append(ConstraintsInput)
ConstraintsInput.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'DT', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'ESF', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'Temp', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'Theta', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'dpdx', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'sigma', (TType.DOUBLE, None, False), None, ),  # 6
)
all_structs.append(ConstraintsOutput)
ConstraintsOutput.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'con1_esf', None, None, ),  # 1
    (2, TType.DOUBLE, 'con2_esf', None, None, ),  # 2
    (3, TType.DOUBLE, 'con_dpdx', None, None, ),  # 3
    (4, TType.DOUBLE, 'con_dt', None, None, ),  # 4
    (5, TType.DOUBLE, 'con_sigma1', None, None, ),  # 5
    (6, TType.DOUBLE, 'con_sigma2', None, None, ),  # 6
    (7, TType.DOUBLE, 'con_sigma3', None, None, ),  # 7
    (8, TType.DOUBLE, 'con_sigma4', None, None, ),  # 8
    (9, TType.DOUBLE, 'con_sigma5', None, None, ),  # 9
    (10, TType.DOUBLE, 'con_temp', None, None, ),  # 10
    (11, TType.DOUBLE, 'con_theta_low', None, None, ),  # 11
    (12, TType.DOUBLE, 'con_theta_up', None, None, ),  # 12
)
fix_spec(all_structs)
del all_structs
