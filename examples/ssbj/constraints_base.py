# -*- coding: utf-8 -*-
"""
  constraints_base.py generated by WhatsOpt 1.10.4
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: https://ether.onera.fr/whatsopt
# analysis_id: 2


import numpy as np
from numpy import nan
from os import path
from importlib import import_module
from yaml import load, FullLoader
from openmdao.api import ExplicitComponent

class ConstraintsBase(ExplicitComponent):
    """ An OpenMDAO base component to encapsulate Constraints discipline """

    def __init__(self, **kwargs):
        super(ConstraintsBase, self).__init__(**kwargs)
        self._impl = None
        dockconf = path.join(path.dirname(__file__), ".whatsopt_dock.yml")
        if path.exists(dockconf):
            with open(dockconf) as dockfile:
                dock = load(dockfile, Loader=FullLoader)
                impl = dock.get("constraints")
                if impl:
                    module = import_module(impl['module'])
                    self._impl = getattr(module, impl['class'])()

    def setup(self):
        self.add_input('dpdx', val=np.ones((1,)), desc='')
        self.add_input('DT', val=np.ones((1,)), desc='')
        self.add_input('ESF', val=np.ones((1,)), desc='')
        self.add_input('sigma', val=np.ones((5,)), desc='')
        self.add_input('Temp', val=np.ones((1,)), desc='')
        self.add_input('Theta', val=np.ones((1,)), desc='')

        self.add_output('con1_esf', val=np.ones((1,)), desc='')

        self.add_output('con2_esf', val=np.ones((1,)), desc='')

        self.add_output('con_dpdx', val=np.ones((1,)), desc='')

        self.add_output('con_dt', val=np.ones((1,)), desc='')

        self.add_output('con_sigma1', val=np.ones((1,)), desc='')

        self.add_output('con_sigma2', val=np.ones((1,)), desc='')

        self.add_output('con_sigma3', val=np.ones((1,)), desc='')

        self.add_output('con_sigma4', val=np.ones((1,)), desc='')

        self.add_output('con_sigma5', val=np.ones((1,)), desc='')

        self.add_output('con_temp', val=np.ones((1,)), desc='')

        self.add_output('con_theta_low', val=np.ones((1,)), desc='')

        self.add_output('con_theta_up', val=np.ones((1,)), desc='')



        