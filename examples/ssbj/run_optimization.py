# -*- coding: utf-8 -*-
"""
  run_optimization.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 2

import sys
import numpy as np
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader, ScipyOptimizeDriver #, pyOptSparseDriver
from ssbj_mda import SsbjMda 


from optparse import OptionParser
parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
(options, args) = parser.parse_args()

pb = Problem(SsbjMda())

class NamedScipyOptimizeDriver(ScipyOptimizeDriver):
    def _get_name(self):
        return 'scipy_optimizer_slsqp'
pb.driver = NamedScipyOptimizeDriver()
pb.driver.options['optimizer'] = 'SLSQP'


pb.driver.options['tol'] = 1.0e-06

pb.driver.options['maxiter'] = 100

pb.driver.options['disp'] = True
#pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs', 'totals']
pb.driver.options['debug_print'] = []

case_recorder_filename = 'ssbj_mda_optimization.sqlite'
print(case_recorder_filename)        
recorder = SqliteRecorder(case_recorder_filename)
# pb.add_recorder(recorder)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)

# Derivatives are compute via finite-difference method
# to be commented out if partial derivatives are declared
pb.model.approx_totals(method='fd', step=1e-6, form='central')

pb.model.add_design_var('z', lower=[0.2, 0.666, 0.875, 0.45, 0.72, 0.5], upper=[1.8, 1.333, 1.125, 1.45, 1.27, 1.5])
pb.model.add_design_var('x_aer', lower=0.75, upper=1.25)
pb.model.add_design_var('x_str', lower=[0.4, 0.75], upper=[1.6, 1.25])
pb.model.add_design_var('x_pro', lower=0.18, upper=1.81)


pb.model.add_objective('R', scaler=-1)

pb.model.add_constraint('con1_esf', upper=0.)
pb.model.add_constraint('con2_esf', upper=0.)
pb.model.add_constraint('con_dpdx', upper=0.)
pb.model.add_constraint('con_dt', upper=0.)
pb.model.add_constraint('con_sigma1', upper=0.)
pb.model.add_constraint('con_sigma2', upper=0.)
pb.model.add_constraint('con_sigma3', upper=0.)
pb.model.add_constraint('con_sigma4', upper=0.)
pb.model.add_constraint('con_sigma5', upper=0.)
pb.model.add_constraint('con_temp', upper=0.)
pb.model.add_constraint('con_theta_low', upper=0.)
pb.model.add_constraint('con_theta_up', upper=0.)

pb.setup()  
pb.run_driver()      

if options.batch:
    exit(0)  

# reader = CaseReader(case_recorder_filename)
# cases = reader.list_cases('problem')
# print(cases)

# for i in range(len(cases)):
#    obj = cases[i].get_objectives()
#    print(obj)      
