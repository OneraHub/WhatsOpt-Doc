# -*- coding: utf-8 -*-
"""
  run_server.py generated by WhatsOpt. 
"""
#!/usr/bin/env python

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from server.ssbj import Ssbj as SsbjService
from server.ssbj_conversions import *
from ssbj import Ssbj as Factory

class SsbjHandler:
    server = None

    def __init__(self):
        factory = Factory()
        
        self.structure = factory.create_structure()
        
        self.aerodynamics = factory.create_aerodynamics()
        
        self.propulsion = factory.create_propulsion()
        
        self.performance = factory.create_performance()
        
        self.constraints = factory.create_constraints()
        

    # Admin interface
    def ping(self):
        print("Ping!")

    def shutdown(self):
        print("Shutting down Ssbj server...")
        exit(0)

    # Ssbj interface
    
    def compute_structure(self, ins):
        outputs = {}
        inputs = to_openmdao_structure_inputs(ins)
        self.structure.compute(inputs, outputs)
        return to_thrift_structure_output(outputs)
    
    def compute_aerodynamics(self, ins):
        outputs = {}
        inputs = to_openmdao_aerodynamics_inputs(ins)
        self.aerodynamics.compute(inputs, outputs)
        return to_thrift_aerodynamics_output(outputs)
    
    def compute_propulsion(self, ins):
        outputs = {}
        inputs = to_openmdao_propulsion_inputs(ins)
        self.propulsion.compute(inputs, outputs)
        return to_thrift_propulsion_output(outputs)
    
    def compute_performance(self, ins):
        outputs = {}
        inputs = to_openmdao_performance_inputs(ins)
        self.performance.compute(inputs, outputs)
        return to_thrift_performance_output(outputs)
    
    def compute_constraints(self, ins):
        outputs = {}
        inputs = to_openmdao_constraints_inputs(ins)
        self.constraints.compute(inputs, outputs)
        return to_thrift_constraints_output(outputs)
    


handler = SsbjHandler()
processor = SsbjService.Processor(handler)
transport = TSocket.TServerSocket('0.0.0.0', port=31400)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = handler.server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

print("Starting Ssbj analysis server...")
server.serve()
print("done!")
