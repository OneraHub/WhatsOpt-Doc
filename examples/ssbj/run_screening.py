# -*- coding: utf-8 -*-
"""
  run_screening.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 124

import sys
import numpy as np
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.salib_doe_driver import SalibDoeDriver
from SALib.analyze import morris as ma
from SALib.plotting import morris as mp
from ssbj import Ssbj 

from optparse import OptionParser
parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
(options, args) = parser.parse_args()

pb = Problem(Ssbj())
pb.driver = SalibDoeDriver(n_trajs=10, n_levels=4, grid_step_size=1)
case_recorder_filename = 'ssbj_screening.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

pb.model.add_design_var('x_aer', lower=0.75, upper=1.25)
pb.model.add_design_var('z', lower=[0.2, 0.666, 0.875, 0.45, 0.72, 0.5], upper=[1.8, 1.333, 1.125, 1.45, 1.27, 1.5])
pb.model.add_design_var('x_pro', lower=0.18, upper=1.81)
pb.model.add_design_var('x_str', lower=[0.4, 0.75], upper=[1.6, 1.25])
pb.model.add_objective('R')
pb.model.add_constraint('con1_esf', upper=0.)
pb.model.add_constraint('con2_esf', upper=0.)
pb.model.add_constraint('con_dpdx', upper=0.)
pb.model.add_constraint('con_dt', upper=0.)
pb.model.add_constraint('con_sigma1', upper=0.)
pb.model.add_constraint('con_sigma2', upper=0.)
pb.model.add_constraint('con_sigma3', upper=0.)
pb.model.add_constraint('con_sigma4', upper=0.)
pb.model.add_constraint('con_sigma5', upper=0.)
pb.model.add_constraint('con_temp', upper=0.)
pb.model.add_constraint('con_theta_low', upper=0.)
pb.model.add_constraint('con_theta_up', upper=0.)
pb.setup()  
pb.run_driver()        

if options.batch:
    exit(0)
reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
data['inputs']['x_aer'] = np.zeros((n,)+(1,))
data['inputs']['z'] = np.zeros((n,)+(6,))
data['inputs']['x_pro'] = np.zeros((n,)+(1,))
data['inputs']['x_str'] = np.zeros((n,)+(2,))
data['outputs']['R'] = np.zeros((n,)+(1,))
data['outputs']['con1_esf'] = np.zeros((n,)+(1,))
data['outputs']['con2_esf'] = np.zeros((n,)+(1,))
data['outputs']['con_dpdx'] = np.zeros((n,)+(1,))
data['outputs']['con_dt'] = np.zeros((n,)+(1,))
data['outputs']['con_sigma1'] = np.zeros((n,)+(1,))
data['outputs']['con_sigma2'] = np.zeros((n,)+(1,))
data['outputs']['con_sigma3'] = np.zeros((n,)+(1,))
data['outputs']['con_sigma4'] = np.zeros((n,)+(1,))
data['outputs']['con_sigma5'] = np.zeros((n,)+(1,))
data['outputs']['con_temp'] = np.zeros((n,)+(1,))
data['outputs']['con_theta_low'] = np.zeros((n,)+(1,))
data['outputs']['con_theta_up'] = np.zeros((n,)+(1,))

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)
    data['inputs']['x_aer'][i,:] = case.inputs['x_aer']
    data['inputs']['z'][i,:] = case.inputs['z']
    data['inputs']['x_pro'][i,:] = case.inputs['x_pro']
    data['inputs']['x_str'][i,:] = case.inputs['x_str']
    data['outputs']['R'][i,:] = case.outputs['R']
    data['outputs']['con1_esf'][i,:] = case.outputs['con1_esf']
    data['outputs']['con2_esf'][i,:] = case.outputs['con2_esf']
    data['outputs']['con_dpdx'][i,:] = case.outputs['con_dpdx']
    data['outputs']['con_dt'][i,:] = case.outputs['con_dt']
    data['outputs']['con_sigma1'][i,:] = case.outputs['con_sigma1']
    data['outputs']['con_sigma2'][i,:] = case.outputs['con_sigma2']
    data['outputs']['con_sigma3'][i,:] = case.outputs['con_sigma3']
    data['outputs']['con_sigma4'][i,:] = case.outputs['con_sigma4']
    data['outputs']['con_sigma5'][i,:] = case.outputs['con_sigma5']
    data['outputs']['con_temp'][i,:] = case.outputs['con_temp']
    data['outputs']['con_theta_low'][i,:] = case.outputs['con_theta_low']
    data['outputs']['con_theta_up'][i,:] = case.outputs['con_theta_up']

salib_pb = pb.driver.get_salib_problem()
inputs = pb.driver.get_cases()

print('*** Output: R')
output = data['outputs']['R'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('R '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con1_esf')
output = data['outputs']['con1_esf'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con1_esf '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con2_esf')
output = data['outputs']['con2_esf'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con2_esf '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_dpdx')
output = data['outputs']['con_dpdx'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_dpdx '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_dt')
output = data['outputs']['con_dt'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_dt '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_sigma1')
output = data['outputs']['con_sigma1'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_sigma1 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_sigma2')
output = data['outputs']['con_sigma2'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_sigma2 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_sigma3')
output = data['outputs']['con_sigma3'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_sigma3 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_sigma4')
output = data['outputs']['con_sigma4'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_sigma4 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_sigma5')
output = data['outputs']['con_sigma5'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_sigma5 '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_temp')
output = data['outputs']['con_temp'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_temp '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_theta_low')
output = data['outputs']['con_theta_low'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_theta_low '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

print('*** Output: con_theta_up')
output = data['outputs']['con_theta_up'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('con_theta_up '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})


plt.show()
